import matplotlib.pyplot as plt

merge_stats = {'random_time': [0.00039992332458496096, 0.00040602684020996094, 0.0009995460510253905, 0.002800178527832031, 0.005607318878173828, 0.011799192428588868, 0.02519998550415039, 0.05360832214355469, 0.11460733413696289], 'random_compares': [383.2, 768.8, 1536.8, 3072.8, 6144.4, 12288.0, 24575.2, 49152.8, 98304.0], 'incr_time': [0.0, 0.0009691715240478516, 0.0020008087158203125, 0.0020189285278320312, 0.004992961883544922, 0.009999752044677734, 0.02202773094177246, 0.04603385925292969, 0.09002089500427246], 'incr_compares': [260.0, 516.0, 1028.0, 2052.0, 4100.0, 8196.0, 16388.0, 32772.0, 65540.0], 'decr_time': [0.0010004043579101562, 0.0010004043579101562, 0.0010018348693847656, 0.002000570297241211, 0.004000186920166016, 0.01002955436706543, 0.02198934555053711, 0.04603266716003418, 0.09103751182556152], 'decr_compares': [260.0, 516.0, 1028.0, 2052.0, 
4100.0, 8196.0, 16388.0, 32772.0, 65540.0], 'same_time': [0.00033354759216308594, 0.0003337860107421875, 0.0013327598571777344, 0.002332925796508789, 0.005331834157307942, 0.010990381240844727, 0.02401256561279297, 0.0493470033009847, 0.1056663990020752], 'same_compares': [342.0, 690.0, 1359.3333333333333, 2726.0, 5480.666666666667, 10876.666666666666, 21831.333333333332, 43683.333333333336, 87316.0]}

shell_stats = {'random_time': [0.0, 0.0004000663757324219, 0.0009998798370361329, 0.002399635314941406, 0.005794048309326172, 0.013796138763427734, 0.033199501037597653, 0.07640728950500489, 0.18439993858337403], 'random_compares': [1062.2, 2574.6, 6243.2, 14700.6, 33826.0, 79706.0, 187762.0, 434982.2, 1027325.0], 'incr_time': [0.0, 0.0010001659393310547, 0.0, 0.0009987354278564453, 0.002001047134399414, 0.002999544143676758, 0.006999015808105469, 0.013990402221679688, 0.02754378318786621], 'incr_compares': [461.0, 1101.0, 2529.0, 5601.0, 12700.0, 27852.0, 60620.0, 132699.0, 283399.0], 'decr_time': [0.0, 0.0, 0.0, 0.002000570297241211, 0.003000020980834961, 0.0060002803802490234, 0.014029979705810547, 0.037999868392944336, 0.06903743743896484], 'decr_compares': [859.0, 2077.0, 4319.0, 10031.0, 22112.0, 44704.0, 95824.0, 245411.0, 492055.0], 'same_time': [0.0003333886464436849, 0.0003331502278645833, 0.00033275286356608075, 0.0009992917378743489, 0.0020003318786621094, 0.0036666393280029297, 0.008999268213907877, 0.017677704493204754, 0.036664485931396484], 'same_compares': [644.3333333333334, 1429.0, 3211.3333333333335, 6980.666666666667, 15442.666666666666, 33777.666666666664, 72167.66666666667, 156687.33333333334, 332585.6666666667]}

insertion_stats = {'random_time': [0.0004021644592285156, 0.001599740982055664, 0.00760650634765625, 0.03139972686767578, 0.13140835762023925, 0.509598684310913, 2.054815149307251, 8.171000289916993, 684.128252696991], 'random_compares': [4181.0, 15815.0, 66652.4, 261326.6, 1048780.2, 4182843.4, 16829906.6, 66838888.6, 268657193.4], 'incr_time': [0.0, 0.0, 0.0009844303131103516, 0.0, 
0.001008749008178711, 0.0009810924530029297, 0.0010335445404052734, 0.0030012130737304688, 0.0040318965911865234], 'incr_compares': [127.0, 255.0, 511.0, 1023.0, 2047.0, 4095.0, 8191.0, 16383.0, 32767.0], 'decr_time': [0.0009999275207519531, 0.003998517990112305, 0.015000343322753906, 0.0599980354309082, 0.24202394485473633, 0.9969954490661621, 4.031010627746582, 15.80499792098999, 62.09677696228027], 'decr_compares': [8255.0, 32895.0, 131327.0, 524799.0, 2098175.0, 8390655.0, 33558527.0, 134225919.0, 536887295.0], 'same_time': [0.00033322970072428387, 0.0013341108957926433, 0.0053331851959228516, 0.02133329709370931, 0.08434677124023438, 0.3333330949147542, 1.3329853216807048, 5.257997433344523, 20.78427290916443], 'same_compares': [2903.0, 10669.333333333334, 44562.0, 172107.0, 710225.6666666666, 2804212.6666666665, 11191719.666666666, 44607031.333333336, 178489515.66666666]}

selection_stats = {'random_time': [0.0003996372222900391, 0.001799774169921875, 0.008206462860107422, 0.032799911499023435, 0.13680791854858398, 0.5267995834350586, 2.157024097442627, 8.513599491119384, 34.48879828453064], 'random_compares': [8128.0, 32640.0, 130816.0, 523776.0, 2096128.0, 8386560.0, 33550336.0, 134209536.0, 536854528.0], 'incr_time': [0.0, 0.0019998550415039062, 0.009960412979125977, 0.03399848937988281, 0.1329793930053711, 0.5199973583221436, 2.1090087890625, 8.434040307998657, 33.37002658843994], 'incr_compares': [8128.0, 32640.0, 130816.0, 523776.0, 2096128.0, 8386560.0, 33550336.0, 134209536.0, 536854528.0], 'decr_time': [0.0, 0.0019989013671875, 0.009029388427734375, 0.03500032424926758, 0.1409931182861328, 0.5299994945526123, 2.2210006713867188, 8.542004585266113, 34.61200165748596], 'decr_compares': [8128.0, 32640.0, 130816.0, 523776.0, 2096128.0, 8386560.0, 33550336.0, 134209536.0, 536854528.0], 'same_time': [0.0003326733907063802, 0.0020002524058024087, 0.008328596750895182, 0.03433330853780111, 0.14533305168151855, 0.5230135917663574, 2.1837701002756753, 8.517346223195394, 34.487332264582314], 'same_compares': [8128.0, 32640.0, 130816.0, 523776.0, 2096128.0, 8386560.0, 33550336.0, 134209536.0, 536854528.0]}

def show_chart(array_type, data_type):
    tests = ["2^7", "2^8", "2^9", "2^10", "2^11", "2^12", "2^13", "2^14", "2^15"]
    fig, ax = plt.subplots()
    ax.plot(tests, merge_stats[f"{array_type}_{data_type}"], label='Merge')
    ax.plot(tests, shell_stats[f"{array_type}_{data_type}"], label='Shell')
    ax.plot(tests, insertion_stats[f"{array_type}_{data_type}"], label='Insertion')
    ax.plot(tests, selection_stats[f"{array_type}_{data_type}"], label='Selection')
    # ax.title(f"Stats for {sort_type}")

    if data_type == "compares":
        data = "Comparisons"
    else:
        data = "Time"
    ax.set(ylabel='Time', xlabel="Size", title=f"Data: {array_type.capitalize()} array, Measure: {data}")
    ax.set_yscale("log")
    ax.legend()
    ax.grid()
    plt.show()

if __name__ == "__main__":
    # Random
    show_chart("random", "time")
    show_chart("random", "compares")

    # increasing
    show_chart("incr", "time")
    show_chart("incr", "compares")

    # decreasing
    show_chart("decr", "time")
    show_chart("decr", "compares")

    # same -- repetitive
    show_chart("same", "time")
    show_chart("same", "compares")
